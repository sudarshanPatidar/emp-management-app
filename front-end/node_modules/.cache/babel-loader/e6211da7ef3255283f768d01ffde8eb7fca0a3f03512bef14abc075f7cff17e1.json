{"ast":null,"code":"var _jsxFileName = \"D:\\\\JavaProjects\\\\employee-management-app\\\\src\\\\components\\\\designations\\\\security\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext, useState } from \"react\";\nimport { apiClient } from \"../api/ApiClient\";\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\n// import { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\n\n//1: Create a Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n\n//2: Share the created context with other components\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default function AuthProvider({\n  children\n}) {\n  _s2();\n  //3: Put some state in the context\n  const [isAuthenticated, setAuthenticated] = useState(false);\n  const [username, setUsername] = useState(null);\n\n  // const [token, setToken] = useState(null)\n\n  function login(username, password) {\n    if (username === 'admin' && password === 'dummy') {\n      setAuthenticated(true);\n      setUsername(username);\n      return true;\n    } else {\n      setAuthenticated(false);\n      setUsername(null);\n      return false;\n    }\n  }\n\n  // async function login(username, password) {\n\n  //     const baToken = 'Basic ' + window.btoa( username + \":\" + password )\n\n  //     try {\n\n  //         const response = await executeBasicAuthenticationService(baToken)\n\n  //         if(response.status==200){\n  //             setAuthenticated(true)\n  //             setUsername(username)\n  //             setToken(baToken)\n\n  //             apiClient.interceptors.request.use(\n  //                 (config) => {\n  //                     console.log('intercepting and adding a token')\n  //                     config.headers.Authorization = baToken\n  //                     return config\n  //                 }\n  //             )\n\n  //             return true            \n  //         } else {\n  //             logout()\n  //             return false\n  //         }    \n  //     } catch(error) {\n  //         logout()\n  //         return false\n  //     }\n  // }\n\n  async function login(username, password) {\n    try {\n      const response = await executeJwtAuthenticationServicecationService(username, password);\n      if (response.status == 200) {\n        const jwtToken = 'Bearer ' + response.data.token;\n        setAuthenticated(true);\n        setUsername(username);\n        setToken(jwtToken);\n        apiClient.interceptors.request.use(config => {\n          console.log('intercepting and adding a token');\n          config.headers.Authorization = jwtToken;\n          return config;\n        });\n        return true;\n      } else {\n        logout();\n        return false;\n      }\n    } catch (error) {\n      logout();\n      return false;\n    }\n  }\n  function logout() {\n    setAuthenticated(false);\n    setToken(null);\n    setUsername(null);\n  }\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout,\n      username\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n}\n_s2(AuthProvider, \"r+hfkL8+aON1x8Go1nUIN28kT5E=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useContext","useState","apiClient","executeJwtAuthenticationService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setAuthenticated","username","setUsername","login","password","response","executeJwtAuthenticationServicecationService","status","jwtToken","data","token","setToken","interceptors","request","use","config","console","log","headers","Authorization","logout","error","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/JavaProjects/employee-management-app/src/components/designations/security/AuthContext.js"],"sourcesContent":["import { createContext, useContext, useState } from \"react\";\r\nimport { apiClient } from \"../api/ApiClient\";\r\nimport { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\r\n// import { executeJwtAuthenticationService } from \"../api/AuthenticationApiService\";\r\n\r\n//1: Create a Context\r\nexport const AuthContext = createContext()\r\n\r\nexport const useAuth = () => useContext(AuthContext)\r\n\r\n//2: Share the created context with other components\r\nexport default function AuthProvider({ children }) {\r\n\r\n    //3: Put some state in the context\r\n    const [isAuthenticated, setAuthenticated] = useState(false)\r\n\r\n    const [username, setUsername] = useState(null)\r\n\r\n    // const [token, setToken] = useState(null)\r\n\r\n    function login(username, password) {\r\n        if(username==='admin' && password==='dummy'){\r\n            setAuthenticated(true)\r\n            setUsername(username)\r\n            return true            \r\n        } else {\r\n            setAuthenticated(false)\r\n            setUsername(null)\r\n            return false\r\n        }        \r\n    }\r\n\r\n    // async function login(username, password) {\r\n\r\n    //     const baToken = 'Basic ' + window.btoa( username + \":\" + password )\r\n\r\n    //     try {\r\n\r\n    //         const response = await executeBasicAuthenticationService(baToken)\r\n\r\n    //         if(response.status==200){\r\n    //             setAuthenticated(true)\r\n    //             setUsername(username)\r\n    //             setToken(baToken)\r\n\r\n    //             apiClient.interceptors.request.use(\r\n    //                 (config) => {\r\n    //                     console.log('intercepting and adding a token')\r\n    //                     config.headers.Authorization = baToken\r\n    //                     return config\r\n    //                 }\r\n    //             )\r\n\r\n    //             return true            \r\n    //         } else {\r\n    //             logout()\r\n    //             return false\r\n    //         }    \r\n    //     } catch(error) {\r\n    //         logout()\r\n    //         return false\r\n    //     }\r\n    // }\r\n\r\n\r\n    async function login(username, password) {\r\n\r\n        try {\r\n\r\n            const response = await executeJwtAuthenticationServicecationService(username, password)\r\n\r\n            if(response.status==200){\r\n                \r\n                const jwtToken = 'Bearer ' + response.data.token\r\n                \r\n                setAuthenticated(true)\r\n                setUsername(username)\r\n                setToken(jwtToken)\r\n\r\n                apiClient.interceptors.request.use(\r\n                    (config) => {\r\n                        console.log('intercepting and adding a token')\r\n                        config.headers.Authorization = jwtToken\r\n                        return config\r\n                    }\r\n                )\r\n\r\n                return true            \r\n            } else {\r\n                logout()\r\n                return false\r\n            }    \r\n        } catch(error) {\r\n            logout()\r\n            return false\r\n        }\r\n    }\r\n\r\n\r\n    function logout() {\r\n        setAuthenticated(false)\r\n        setToken(null)\r\n        setUsername(null)\r\n    }\r\n\r\n    return (\r\n        <AuthContext.Provider value={ {isAuthenticated, login, logout, username}  }>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    )\r\n} "],"mappings":";;;AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAC3D,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,+BAA+B,QAAQ,iCAAiC;AACjF;;AAEA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMR,UAAU,CAACM,WAAW,CAAC;AAAA;;AAEpD;AAAAE,EAAA,CAFaD,OAAO;AAGpB,eAAe,SAASE,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,GAAA;EAE/C;EACA,MAAM,CAACC,eAAe,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAE3D,MAAM,CAACa,QAAQ,EAAEC,WAAW,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE9C;;EAEA,SAASe,KAAKA,CAACF,QAAQ,EAAEG,QAAQ,EAAE;IAC/B,IAAGH,QAAQ,KAAG,OAAO,IAAIG,QAAQ,KAAG,OAAO,EAAC;MACxCJ,gBAAgB,CAAC,IAAI,CAAC;MACtBE,WAAW,CAACD,QAAQ,CAAC;MACrB,OAAO,IAAI;IACf,CAAC,MAAM;MACHD,gBAAgB,CAAC,KAAK,CAAC;MACvBE,WAAW,CAAC,IAAI,CAAC;MACjB,OAAO,KAAK;IAChB;EACJ;;EAEA;;EAEA;;EAEA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA,eAAeC,KAAKA,CAACF,QAAQ,EAAEG,QAAQ,EAAE;IAErC,IAAI;MAEA,MAAMC,QAAQ,GAAG,MAAMC,4CAA4C,CAACL,QAAQ,EAAEG,QAAQ,CAAC;MAEvF,IAAGC,QAAQ,CAACE,MAAM,IAAE,GAAG,EAAC;QAEpB,MAAMC,QAAQ,GAAG,SAAS,GAAGH,QAAQ,CAACI,IAAI,CAACC,KAAK;QAEhDV,gBAAgB,CAAC,IAAI,CAAC;QACtBE,WAAW,CAACD,QAAQ,CAAC;QACrBU,QAAQ,CAACH,QAAQ,CAAC;QAElBnB,SAAS,CAACuB,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAK;UACRC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;UAC9CF,MAAM,CAACG,OAAO,CAACC,aAAa,GAAGX,QAAQ;UACvC,OAAOO,MAAM;QACjB,CACJ,CAAC;QAED,OAAO,IAAI;MACf,CAAC,MAAM;QACHK,MAAM,CAAC,CAAC;QACR,OAAO,KAAK;MAChB;IACJ,CAAC,CAAC,OAAMC,KAAK,EAAE;MACXD,MAAM,CAAC,CAAC;MACR,OAAO,KAAK;IAChB;EACJ;EAGA,SAASA,MAAMA,CAAA,EAAG;IACdpB,gBAAgB,CAAC,KAAK,CAAC;IACvBW,QAAQ,CAAC,IAAI,CAAC;IACdT,WAAW,CAAC,IAAI,CAAC;EACrB;EAEA,oBACIV,OAAA,CAACC,WAAW,CAAC6B,QAAQ;IAACC,KAAK,EAAG;MAACxB,eAAe;MAAEI,KAAK;MAAEiB,MAAM;MAAEnB;IAAQ,CAAI;IAAAJ,QAAA,EACtEA;EAAQ;IAAA2B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B;AAAC7B,GAAA,CAnGuBF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}